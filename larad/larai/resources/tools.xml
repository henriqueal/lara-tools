<?xml version="1.0"?>
<tools>
	<!-- Tools available in the REFLECT ToolChain -->
	<catapultc run="catapultc.bat" type="command" extra="">
		<java class = "org.reflect.catapultc.Report"
			  method = "getReport"/>
	</catapultc>
	<harmonic run="gearbox">
		<argument value="-exec=arch;frigg"/>
		<argument value="-cfg=target/"/>
		<argument value="-xin=architecture.xml"/>
		<argument value="-aspReport=harmonic_report.js"/>
		<!-- 
			-aspIR=<aspIR_file>
			-aspLARA=<LARA_file>
		-->
		<javascript report_name="harmonic_report.js"/>
	</harmonic>
	<gprof run="gprof.bat" type="command" extra="">
		<javascript report_name="gprof.js"/>
	</gprof>
	<xst type="eval" needsArgs="true">tools.xilinx.xst</xst>
	<xpwr type="eval" needsArgs="true">tools.xilinx.xpwr</xpwr>
	<ngdbuild type="eval" needsArgs="true">tools.xilinx.ngdbuild</ngdbuild>
	<map type="eval" needsArgs="true">tools.xilinx.map</map>
	<par type="eval" needsArgs="true">tools.xilinx.par</par>
	<trce type="eval" needsArgs="true">tools.xilinx.trce</trce>
	<constraint type="eval" needsArgs="true">tools.xilinx.constraint</constraint>
	<dwarvsim type="eval" needsArgs="true">dwarvsim</dwarvsim>
	<larac run="larac.jar"/>

	<!-- CoSy-based C+LARA to MicroBlaze/x86/VHDL compiler -->
	<reflectc run="reflectc">
        </reflectc>

	<!-- ACE MicroBlaze ELF Generator -->
	<microblazecc run="microblaze-cc" />

	<!-- ACE MicroBlaze ELF Simulator -->
	<microblazesim run="microblaze-sim" />

	<!-- MATLAB to C compiler -->
        <matisse run="java">
		<argument value="-jar" position="before"/>
		<argument value="MatlabToCCompiler.jar" position="before"/>
	</matisse>

	<!-- FEUP MicroBlaze Simulator -->
        <microblazefeupexporter type="java">
                <java  class="MicroBlazeFEUPSimLARA" 
                        method="MicroBlazeSimFEUPLARAtoString" />
        </microblazefeupexporter>

	<!-- Export ACE MicroBlaze simulator performance metrics -->
        <microblazeexporter type="java">
		<java  class="MicroBlazeSimLARA" 
			method="MicroBlazeSimLARAtoString" />
	</microblazeexporter>

        <microblazereflectcexporter type="java">
                <java  class="MicroBlazeReflectCSimLARA" 
                        method="MicroBlazeReflectCSimLARAtoString" />
        </microblazereflectcexporter>


        <!-- Export ACE MicroBlaze simulator performance metrics -->
        <tsimexporter type="java">
                <java  class="TSimLARA" 
                        method="TSimLARAtoString" />
        </tsimexporter>

        <mor1kxexporter type="java">
                <java  class="Mor1kxSimLARA" 
                        method="Mor1kxSimLARAtoString" />
        </mor1kxexporter>

        <boardexporter type="java">
                <java  class="BoardExecLARA" 
                        method="BoardExecLARAtoString" />
        </boardexporter>

        <simulavrexporter type="java">
                <java  class="SimulAvrLARA" 
                        method="SimulAvrLARAtoString" />
        </simulavrexporter>

        <exectimeexporter type="java">
		<java  class="ExecNanosecLARA" 
			method="ExecNanosecLARAtoString" />
	</exectimeexporter>

        <raplexporter type="java">
                <java  class="RaplExporter" 
                        method="RaplExporterToString" />
        </raplexporter>

        <!-- Export ACE MicroBlaze simulator performance metrics -->
        <modelsimexporter type="java">
                <java  class="ModelSimLARA" 
                        method="ModelSimLARAtoString" />
        </modelsimexporter>


        <odroidenergyexporter type="java">
                <java  class="OdroidEnergyLARA" 
                        method="OdroidEnergyLARAtoString" />
        </odroidenergyexporter>

        <exectimepolybenchgpuexporter type="java">
                <java  class="ExecNanosecPolybenchGPULARA" 
                        method="ExecNanosecPolybenchGPULARAtoString" />
        </exectimepolybenchgpuexporter>


        <!-- LLVM opt -->
        <opt run="opt" />

        <!-- LLC opt -->
        <llc run="llc" />

        <!-- CLANG -->
        <clang run="clang" />

        <!-- CLANG -->
        <!--
	<ecc run="/home/php/ellcc-0.0.1/bin/ecc" />
	-->



</tools>
