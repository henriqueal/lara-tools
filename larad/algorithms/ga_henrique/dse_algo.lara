aspectdef dse_algo

  input
    exploreParams = [], frontend, compile, execute_and_report, compile_execute_and_report, check_sequence_is_valid, add_timing, cleanall, minimumLat = 100, sequences, iterations, maxwidth, optimLevelsLatency, nr, selection, maxGen, popSize, crossRate, mutRate, stopByFit, initChrom;
  end

  output
    bestSeq, bestSeqLatency, sizeHistPop ,chromoSizeBestIndiv;
  end

  function isnooptim(x){
    if(x !== "NOOPTIM") {
      return true;
    }
  }

  //-Ox variables
  var optimLevel = ""; //"-O0"; // No optimization
  var latencyRef = optimLevelsLatency[0];
  var maxValue=Number.MAX_VALUE;
  var total_steps="10000";

  //Ag params
  var tour=3;
  var popTotal;

  //stopcriterions
  var bestFit=0;
  var contRepeatedFit=0;
  var maxRepeatedFit=100;

  //variaveis do ag
  var pop = [];
  var popId;
  var exploreParamSize = exploreParams.length;
  var iGen;
  var histPop = [];
  //var repeatedMut = 5;
  sizeHistPop = 0;
  var aux=0;


  if(latencyRef == 0) {
    for(var i=0; i<optimLevelsLatency.length; i++) {
      if(optimLevelsLatency[i] > 0) {
        latencyRef = optimLevelsLatency[i];
      }
    }
  }
  
  // Adjust parameters for percentage
  crossRate = crossRate/100;
  mutRate = mutRate/100;

  // Define the maximum size of population
  popTotal = Math.round(popSize * (1+crossRate));
  if (popTotal%2 == 1) {
    popTotal++;
  }
  
  /*println("selection: " + selection);
  println("maxGen:" + maxGen);
  println("popSize: " + popSize);
  println("crossRate: " + crossRate);
  println("mutRate: " + mutRate);
  println("stopByFit: " + stopByFit);
  println("popTotal: "+ popTotal);*/
  //println("initChrom: "+ initChrom);
  //println("nexec: " + nexec);


  //01-beg Generate Initial Population ------------------------------------------------------------------

  pop = generateInitialPopulation(popSize, exploreParams, exploreParamSize, isnooptim, compile_execute_and_report, maxValue, total_steps, check_sequence_is_valid, maxwidth, initChrom);
  
  var i,cont=0;
  for (i=0; i<popSize; i++){
    histPop[i] = indiv_copy(pop[i]);
  }
  sizeHistPop = popSize;


  for (i=0; i<popSize;i++){
    if(pop[i].fitness == Number.MAX_VALUE){
      cont++;
    }
  }

  // childrens
  for (popId = popSize; popId < popTotal; popId++){
    pop[popId] = indiv_maker();
  }
  //01-end -----------------------------------------------------------------------------------------------
  for (iGen = 0; iGen < maxGen; iGen++) { 
    var child1=0;
    for (child1 = popSize; child1 < popTotal; child1++) {
      var child2 = (child1*1.0 +1);

      //02-beg SELECTION ---------------------------------------------------------------------------------
      var parent1, parent2;
      if(selection == "tour"){        
        parent2 = tournment(pop, popSize, tour);
      } else if (selection == "roulette"){
        parent2 = roulette(pop, popSize);
      }

      parent1=parent2;

      do {
        if(selection == "tour"){
          parent2 = tournment(pop, popSize, tour);
        } else if (selection == "roulette"){
          parent2 = roulette(pop, popSize);
        } 
      } while (parent1 == parent2);
      //02-end ------------------------------------------------------------------------------------------
      
      //03-beg Crossover --------------------------------------------------------------------------------
      var childrens = [];
      childrens = crossoverTwoPoints(pop, parent1, parent2);
      pop[child1] = indiv_copy(childrens[0]);
      pop[child2] = indiv_copy(childrens[1]);
      //03-end ------------------------------------------------------------------------------------------   
      child1 = (child2*1.0);
    }

    //04-beg Mutation -----------------------------------------------------------------------------------
    var i;
    for(i=0;i<Math.floor(mutRate*popSize);i++){
      var indexMutation = Math.floor((Math.random()*(popTotal - popSize)) + (popSize*1.0));
      mutationX(pop[indexMutation], exploreParams, exploreParamSize);
    }
    //04-end --------------------------------------------------------------------------------------------
    

    //05-beg Calculte Childrens Fitness -----------------------------------------------------------------
    
    

    for(i=popSize;i<popTotal;i++){

      if(indiv_finder(histPop, pop[i]) > -1){
        pop[i].fitness = Number.MAX_VALUE;
        pop[i].chromosomeSize = maxwidth;
        aux++;
      } else {
        optimLevel = pop[i].chromosome.filter(isnooptim).join(" ");
        pop[i].fitness = compile_execute_and_report(optimLevel);
        if(check_sequence_is_valid(pop[i].fitness, optimLevel, pop[i].chromosomeSize) == false) {
          pop[i].fitness = Number.MAX_VALUE;
          pop[i].chromosomeSize = maxwidth;
        }
        histPop[sizeHistPop] = indiv_copy(pop[i]); 
        sizeHistPop++;
      }
    }
    
    //05-end --------------------------------------------------------------------------------------------
     

    //06-beg Reinsertion --------------------------------------------------------------------------------
    pop.sort(by('fitness', by('chromosomeSize')));
    //println("The best of gen["+ iGen + "] = " + pop[0].fitness + "; " + pop[0].chromosomeSize + "; " + pop[0].chromosome.join(","));
    //06-end --------------------------------------------------------------------------------------------
    
    //07 - beg Stop criterions --------------------------------------------------------------------------
    if(bestFit == pop[0].fitness){
      contRepeatedFit++;
    } else {
      bestFit = pop[0].fitness;
      contRepeatedFit=0;
    }

    if(contRepeatedFit >= maxRepeatedFit){
      break;
    }
    
    //07-end ------------------------------------------------------------------------------------------
  }

  bestSeqLatency = pop[0].fitness;
  bestSeq = pop[0].chromosome;
  chromoSizeBestIndiv = pop[0].chromosomeSize;

end