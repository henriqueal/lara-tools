aspectdef dse_algo

  input
    exploreParams = [], frontend, compile, execute_and_report, compile_execute_and_report, check_sequence_is_valid, add_timing, cleanall, minimumLat = 100, sequences, iterations, maxwidth, optimLevelsLatency, nr, selection;
  end

  output
    bestSeq, bestSeqLatency;
  end

  function isnooptim(x){
    if(x !== "NOOPTIM") {
      return true;
    }
  }

  //-Ox variables
  var optimLevel = ""; //"-O0"; // No optimization
  var latencyRef = optimLevelsLatency[0];

  //Ag params
  var maxGen ="30";
  var popSize="30"; 
  var crossRate="60";
  var mutationRate="40";
  var tour="3";  
  var popTotal;

  //stopcriterions
  var bestFit=0;
  var contRepeatedFit=0;
  var maxRepeatedFit=3;

  //variaveis do ag
  var pop = [];
  var popId;
  var exploreParamSize = exploreParams.length;
  var iGen;

  if(latencyRef == 0) {
    for(var i=0; i<optimLevelsLatency.length; i++) {
      if(optimLevelsLatency[i] > 0) {
        latencyRef = optimLevelsLatency[i];
      }
    }
  }
  
  // Adjust parameters for percentage
  crossRate = crossRate/100;
  mutationRate = mutationRate/100;

  // Define the maximum size of population
  popTotal = Math.round(popSize * (1+crossRate));
  if (popTotal%2 == 1) {
    popTotal++;
  }

  //01-beg Generate Initial Population ------------------------------------------------------------------
  pop = generateInitialPopulation(popSize, exploreParams, exploreParamSize, isnooptim, compile_execute_and_report);
  //armazenar no vetor hist√≥rico?

  // childrens
  for (popId = popSize; popId < popTotal; popId++){
    pop[popId] = indiv_maker();
  }
  //01-end -----------------------------------------------------------------------------------------------

  for (iGen = 0; iGen < maxGen; iGen++) {

    var child1;
    for (child1 = popSize; child1 < popTotal; child1 = child1+2) {
      var child2 = child1++;

      //02-beg SELECTION ---------------------------------------------------------------------------------
      var parent1, parent2;
      if(selection == "tour"){        
        parent2 = tournment(pop, popSize, tour);
      } else if (selection == "roulette"){
        parent2 = roulette(pop, popSize);
      }

      parent1=parent2;

      do {
        if(selection == "tour"){
          parent2 = tournment(pop, popSize, tour);
        } else if (selection == "roulette"){
          parent2 = roulette(pop, popSize);
        } 
      } while (parent1 == parent2);
      //02-end ------------------------------------------------------------------------------------------

      //03-beg Crossover --------------------------------------------------------------------------------
      var childrens = [];
      childrens = crossoverTwoPoints(pop, parent1, parent2, isnooptim, compile_execute_and_report);
      pop[child1] = indiv_copy(childrens[0]);
      pop[child2] = indiv_copy(childrens[1]);
      //03-end ------------------------------------------------------------------------------------------
      
    }

    //04-beg Mutation -----------------------------------------------------------------------------------
    var i;
    for(i=0;i<Math.floor(mutationRate*popSize);i++){
      var indexMutation = Math.floor((Math.random()*(popTotal - popSize)) + (popSize*1.0));
      mutationX(pop[indexMutation], exploreParams, exploreParamSize, isnooptim, compile_execute_and_report);
    }
    //04-end --------------------------------------------------------------------------------------------


    //05-beg Reinsertion --------------------------------------------------------------------------------
    pop.sort(by('fitness', by('chromosomeSize')));
    //05-end --------------------------------------------------------------------------------------------
    
    //06 - beg Stop criterions --------------------------------------------------------------------------
    if(bestFit == pop[0].fitness){
      contRepeatedFit++;
    } else {
      bestFit = pop[0].fitness;
      contRepeatedFit=0;
    }

    if(contRepeatedFit >= maxRepeatedFit){
      break;
    }
    //06-end ------------------------------------------------------------------------------------------
    //println("iGen: "+iGen);
  }     
    
  bestSeqLatency = pop[0].fitness;
  bestSeq = pop[0].chromosome;

end