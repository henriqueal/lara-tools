/*      Ricardo Nobre                                   *
 *      Departamento de Engenharia Informática          *
 *      FEUP, Porto, Portugal                           * 
 *      ricardo.nobre@fe.up.pt                          */

aspectdef dse_algo

        input
                exploreParams = [], frontend, compile, execute_and_report, compile_execute_and_report, check_sequence_is_valid, add_timing, cleanall, minimumLat = 100, sequences, iterations, maxwidth, optimLevelsLatency, nr;
        end

        output
                bestSeq, bestSeqLatency, total_steps;
        end

	/* GLOBAL DSE EXPLORATION SETTINGS */
        var startTempFactor = -1 / Math.log(0.5); 		// 50% chance of selecting a sequence that is 100% worse than currently selected sequence
        var finalTempFactor = -0.00001 / Math.log(0.01);	// 1%  chance of selecting a sequence that is 0.001% worse than currently selected sequence



	function isnooptim(x){
		if(x !== "NOOPTIM") {
    			return true;
		}
	}

	// The unroll factors are not being used right now. Consider using in future or remove from code.
	//var loopranks = [];
        //var loopfactors = [];

	var i, i0, l_x;
	var inputstring = ""; 

	// Candidate compiler sequence starts as an empty list
	var currentConfig = new Array();

	// starting latency	
	var currentLatency = Number.MAX_VALUE;	
	

	var latencyRef = optimLevelsLatency[0];
	var optimLevel = "";

        if(latencyRef == 0) {
                for(var i=0; i<optimLevelsLatency.length; i++) {
                        if(optimLevelsLatency[i] > 0) {
                                latencyRef = optimLevelsLatency[i];
                        }
                }
        }

	println("\nTuning Simulated Annealing Paramenters...");
	var temp = latencyRef * startTempFactor;
	println("\tT_max\t: " + temp);	
	
	var temp_min = latencyRef * finalTempFactor;
	println("\tT_min\t: " + temp_min);

	// Calculates alpha based on parameters
	var alpha = Math.pow(2.71828182846, Math.log(temp_min/temp)/iterations); //0.95 for subband	// TODO: chose a suitable value
	println("\tα \t: " + alpha);
	
	var num_steps = 1;	// Number of steps per temperature // changed from 1 to 10 in 11 may 2013
	var k;

	// TODO: use time limit to limit amount of time used for DSE
	//var timeLimit = 2 * 60;	// 2 minutes

	bestSeq = new Array();
	bestSeqLatency = Number.MAX_VALUE;

	total_steps = 0;

	println("\nPerforming " + iterations + " DSE iterations using Simulated Annealing considering a maximum of " + maxwidth + " compiler passes per sequence...");

	for(; temp > temp_min; temp = temp * alpha) {
        	for(k=0; k<num_steps; k++) {
			
			total_steps = total_steps + 1;

			var newConfig = new Array();
			newConfig = currentConfig.slice(0);


			if(newConfig.length < maxwidth) {

				var rand_posConfigList = Math.floor(Math.random()*(currentConfig.length + 1));    // Calculates index of random compiler pass in the candidate compiler sequence
				// println(rand_posConfigList);
				var newPass = exploreParams[Math.floor((Math.random() * exploreParams.length) + 0)];
				newConfig = currentConfig.slice(0,rand_posConfigList);
				newConfig.push(newPass);
				newConfig = newConfig.concat(currentConfig.slice(rand_posConfigList)) ;
			}
			else {
				var rand_posConfigList = Math.floor(Math.random()*currentConfig.length);
				var newPass = exploreParams[Math.floor((Math.random() * exploreParams.length) + 0)];
				newConfig[rand_posConfigList] = newPass;
			}


			optimLevel = newConfig.filter(isnooptim).join(" ");

			newLatency = compile_execute_and_report(optimLevel);

			// CHECK IF SEQUENCE PRODUCES VALID BINARY AND EXECUTION PRODUCES THE EXPECTED RESULTS
			if(check_sequence_is_valid(newLatency, optimLevel, total_steps) == false) {
				continue;       // goes to the next iteration ignoring previous configuration
			}

			if(newLatency <= currentLatency) {
				currentLatency = newLatency;
				currentConfig = newConfig;	// TODO: maybe needed to do slice(0)
				// println("BETTER SOLUTION ACCEPTED");
				println("\t" + total_steps + " (O)\t : " + currentLatency + "\t : " + currentConfig.filter(isnooptim).join(" ") + "");

				if(newLatency <= bestSeqLatency) {
					bestSeqLatency = newLatency;
					bestSeq = newConfig.filter(isnooptim);
				}
			}
			else {
				var rand = Math.random();	// random number between 0 and 1 (TODO: attention if it is exclusive or inclusive with 1!)
				var exponential = 2.71828182846;
				var delta_lat = newLatency - currentLatency;
				var val = Math.pow(exponential, - (delta_lat / temp));
				
				if(val > rand) {
					currentLatency = newLatency;
	                                currentConfig = newConfig;      // TODO: maybe needed to do slice(0)
                                        // println("WORST SOLUTION ACCEPTD");	// Can also be a solution with same latency
	                                println("\t" + total_steps + " (XO)\t : " + currentLatency + "\t : " + currentConfig.filter(isnooptim).join(" ") + "");
				}
				else {
                        	        // println("WORST SOLUTION NOT ACCEPTED");
					println("\t" + total_steps + " (X)\t : " + newLatency + "\t : " + newConfig.filter(isnooptim).join(" ") + "");
				
				}
			}
		}
	}

end
