aspectdef dse_algo

	// ==================================================================
	// Input arguments
	// ==================================================================

        input
                exploreParams = [], frontend, compile, execute_and_report, compile_execute_and_report, check_sequence_is_valid, add_timing, cleanall, minimumLat = 100, sequences, iterations, maxwidth, optimLevelsLatency, nr;
        end

        output
                bestSeq, bestSeqLatency, total_steps;
        end


	function isnooptim(x){
		if(x !== "NOOPTIM") {
    			return true;
		}
	}

        var optimLevel = ""; //"-O0";   // No optimization
        var latencyRef = optimLevelsLatency[0];


	if(latencyRef == 0) {
		for(var i=0; i<optimLevelsLatency.length; i++) {
			if(optimLevelsLatency[i] > 0) {
				latencyRef = optimLevelsLatency[i];
			}
		}
	}


	var applyunroll = "0";	// Não posso activar isto, pois isto está feito para o REFLECTC
	var maxGen="1000000"; // estava 30, mas isto estava a limitar o numero de iteraçoes
	var maxCount = "25";
	var popSize="300"; // "300";
	var crossRate="60";
	var mutationRate="40";
	var tour="3";
	
	total_steps = 0;

	// Stop criterion arguments
	var deltaMin = 1;  // joined stop criterion

	// Other arguments
	var vezesTot = 4; // Number of tries to generate new individual



	// ==================================================================
	// Design space coverage
	// ==================================================================
	var exploreParamSize = exploreParams.length;
	
	// Adjust parameters for percentage
	crossRate = crossRate/100;
	mutationRate = mutationRate/100;
	
	// Unrolling parameters
	var loopranks = [];	// ["1","1:1","2","2:1"];	// FOR TEST ONLY
	var looprankSize = 0;	// loopranks.length;
	var loopfactors = [];	// ["1", "2", "4", "0"];



	// ==================================================================
	// ********************** Genetic Algorithm Code ********************
	// ==================================================================

	var speedup;   // Used to computation the speedup of an individual

	// Population array variables
	var histPop = [];
	var histSize = 0;
	var pop = [];
	var popId;    // Population index (individual location)

	// Define the maximum size of population
	var popTotal = Math.round(popSize * (1+crossRate));
	if (popTotal%2 == 1) {
		popTotal++;
	}









	// ***************************************************************************************************************
	// Create other individuals of initial population
	var transformSubsetSize = Math.ceil(popSize/maxwidth); // Increment interval of the optimizations number
	var geneMax = 1;
	for (popId = pop.length; popId < popSize; popId++){
		// Create the popId-th individual
		pop[popId] = indiv_maker();
		// pop[popId].loopFactors = Array.init(looprankSize, loopfactors[0]);

		// Mount chromosome of the code transformations
		var gene;
		for (gene=0; gene < geneMax; gene++) {
			pop[popId].chromosome[gene] = exploreParams[(Math.floor(Math.random()*(exploreParamSize-0.1)))];
		}

		// Increase geneMax
		if (popId == (geneMax * transformSubsetSize)) {
			geneMax++;
		}

		//pop[popId].chromosome = pop[popId].chromosome.reverse();


		// Individual's evaluation
		//-------------------------------------------------------------------
        	// Apply code transformations and simulate
        	optimLevel = pop[popId].chromosome.filter(isnooptim).join(" ");
		pop[popId].fitness = compile_execute_and_report(optimLevel);

		if(check_sequence_is_valid(pop[popId].fitness, optimLevel, total_steps) == false) {
                        pop[popId].fitness = Number.MAX_VALUE;
                        pop[popId].chromosomeSize = maxwidth;

                }
                else {
                        // Tranformations quantification (secundary cost function)
                        pop[popId].chromosomeSize = pop[popId].chromosome.length;
                }

		total_steps++;
	
		// Store individual in historical array
		histPop[histSize] = indiv_copy(pop[popId]);
		histSize++;

		// Debug code
		println(pop[popId].fitness + ";" + pop[popId].chromosomeSize + ";" + pop[popId].chromosome.join(","));
		//-------------------------------------------------------------------
	}
	
	// Sort the population by fitness and size of the transformations size
	pop.sort(by('fitness', by('chromosomeSize')));
	var bestlatency = pop[0].fitness; // Store the best latency
	// ***************************************************************************************************************


	println("pop size: " + pop.length);

	// Create the population of childs
	for (popId = popSize; popId < popTotal; popId++){
		pop[popId] = indiv_maker();
		// pop[popId].loopFactors = Array.init(looprankSize, loopfactors[0]);
	}

	// ==================================================================
	// Interative step (generations)
	// ==================================================================
	var counterSpeedup = 1;
	var counterGen;


	for (counterGen = 0; counterGen < maxGen; counterGen++) {

		if(total_steps >= iterations) {
			println("breaks from external loop");
			break;	// breaks the external loop
		}

		var randNumber;

		// Debug code
		println("--------------------------------------------------------------------------------------------");
		println("Generation " + counterGen + ":");
		println(pop[0].fitness + ";" + pop[0].chromosomeSize + ";" + pop[0].chromosome.join(","));
//		println(pop[0].loopFactors.join(",") + ";" + loopranks.join(","));
		println("--------------------------------------------------------------------------------------------");







		// Crossover operator
		//var novo = 0;
		var child1;
		for (child1 = popSize; child1 < popTotal; child1 = child1+2) {
			//var child2 = child1+1;	// ISTO ESTAVA A RETORNAR COMO SE ESTIVESSE A CONCATENAR AS STRINGS EM VEZ DE SOMAR OS NUMEROS (e.g. 30 + 1 -> 301!!!)
			var child2 = child1++;

			// println("child 2: " + child2);
			// Chose parents
			var parent1, parent2 = tournament(pop, popSize, tour);
			do {
				parent1 = tournament(pop, popSize, tour);	
			} while (parent1 == parent2);

			randNumber = 0; // Disable crossover of unrolling factors

			// Crossover of transformations
			if (randNumber <= 0.8){
				var p1Size;
				var p2Size;
				try {
					p1Size = pop[parent1].chromosome.length;
					p2Size = pop[parent2].chromosome.length;
				}
				catch(err) {
					println("MERDA 1");
					println(err.message);
				}
				var pt1, pt2;
				if (p1Size < p2Size) {
					pt1 = Math.floor(Math.random()*(p1Size-0.1));
					pt2 = Math.floor(Math.random()*(p2Size-p1Size))+pt1;
				}
				else {
					pt2 = Math.floor(Math.random()*(p2Size-0.1));
					pt1 = Math.floor(Math.random()*(p1Size-p2Size))+pt2;
				}

				// Fill the first child individual
				var a, b;
                                try {
					a = pop[parent1].chromosome.slice(0,pt1);
					b = pop[parent2].chromosome.slice(pt2);
					pop[child1].chromosome = a.concat(b);
	                        }
                                catch(err) {
                                        println("MERDA 2");
                                        println(err.message);
                                }
                                // Fill the second child individual
                                try {
					a = pop[parent2].chromosome.slice(0,pt2);
					b = pop[parent1].chromosome.slice(pt1);
					pop[child2].chromosome = a.concat(b);
                                }
                                catch(err) {
                                        println("MERDA 3");
                                        println(err.message);
                                }
			}
			else {
				// Transfer the parents genes for childs (just copy)
                                try {   
					pop[child1].chromosome = pop[parent1].chromosome.slice(0);
					pop[child2].chromosome = pop[parent2].chromosome.slice(0);
                                }
                                catch(err) {
                                        println("MERDA 4");
                                        println(err.message);
                                }

			}
				
		}


		// Mutation operator (only children individuals)
		var novo = 0;
		for (popId = popSize; popId < popTotal; popId++) {
			// Mutation
			if (Math.random() <= mutationRate) {
				mutation(looprankSize, loopfactors, exploreParams[Math.floor(Math.random()*(exploreParamSize-0.1))], pop[popId], pop[popId].chromosome.length, applyunroll, maxwidth);
			}

			// Verify if individual already exists
			var vezes = 0;
			do {
				if (indiv_finder(histPop, pop[popId]) > -1) {
					var x;
					for (x=0; x < (vezes+counterSpeedup); x++) {
						mutation(looprankSize, loopfactors, exploreParams[Math.floor(Math.random()*(exploreParamSize-0.1))], pop[popId], pop[popId].chromosome.length, applyunroll, maxwidth);
						mutation(looprankSize, loopfactors, exploreParams[Math.floor(Math.random()*(exploreParamSize-0.1))], pop[popId], pop[popId].chromosome.length, applyunroll, maxwidth);
						mutation(looprankSize, loopfactors, exploreParams[Math.floor(Math.random()*(exploreParamSize-0.1))], pop[popId], pop[popId].chromosome.length, applyunroll, maxwidth);
					}
					vezes++;
				}
				else {
					break;
				}
			} while (vezes < vezesTot);

			if (vezes < vezesTot) {

				if(total_steps >= iterations) {
					println("Breaks from Generation");
					break;
				}

				// Individual's evaluation
				//-------------------------------------------------------------------
		
				// Apply code transformations
				optimLevel = pop[popId].chromosome.filter(isnooptim).join(" ");
				pop[popId].fitness = compile_execute_and_report(optimLevel);

				if(check_sequence_is_valid(pop[popId].fitness) == false) {
                		        pop[popId].fitness = Number.MAX_VALUE;
                	        	pop[popId].chromosomeSize = maxwidth;
       		         	}
                                else {
                                        // Tranformations quantification (secundary cost function)
                                        pop[popId].chromosomeSize = pop[popId].chromosome.length;
                                }

				total_steps++;
	
				// Store individual in historical array
				histPop[histSize] = indiv_copy(pop[popId]);
				histSize++;
				novo++; // Determines novelty

				// Debug code
				println(pop[popId].fitness + ";" + pop[popId].chromosomeSize + ";" + pop[popId].chromosome.join(","));
				//-------------------------------------------------------------------


			}
			else {
				// Force individual remove for next generation
				pop[popId].fitness = Number.MAX_VALUE;
				pop[popId].chromosomeSize = maxwidth;
			}
		}

		// Elitism reinsertion (sort and cut)
		pop.sort(by('fitness', by('chromosomeSize')));

		bestlatency = pop[0].fitness;

		//******************  STOP CRITERION *******************
/*
		// STOP CRITERION: Improvement between generations
		if ((bestlatency - pop[0].fitness) <= deltaMin || novo == 0) {
			//println("a diferenca eh: " + (bestlatency - pop[0].fitness) + " e o valor de novo eh: " + novo);
			counterSpeedup++;
		}
		else {
			counterSpeedup = 1;
		}
		
		if (counterSpeedup == maxCount) {
			println("*** STOP CRITERION: " + maxCount + " evolutions without improvement ***");
			break;
		}
*/


	}

	// Print historical array
//	for (popId = 0; popId < histSize; popId++) {
//		println(histPop[popId].fitness + ";" + histPop[popId].chromosomeSize + ";" + histPop[popId].chromosome.join(",") + ";" + histPop[popId].loopFactors.join(",") + ";" + loopranks.join(","));
//	}

        bestSeqLatency = bestlatency;
        bestSeq = pop[0].chromosome;


end
