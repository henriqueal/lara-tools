/*      Ricardo Nobre                                   *
 *      Departamento de Engenharia Inform√°tica          *
 *      FEUP, Porto, Portugal                           *
 *      ricardo.nobre@fe.up.pt                          */

aspectdef target_config

	output
		targetName, exporterName, exploreParams, sequences;
	end
	targetName = "microblaze";
	exporterName = "microblazeexporter";	

        // O3 Optimizations used by LLVM 3.3
        exploreParams =     [
/*
        "-adce",
        "-argpromotion",
        "-basicaa",
        "-basiccg",
        "-constmerge",
        "-correlated-propagation",
        "-deadargelim",
        "-domtree",
        "-dse",
        "-early-cse",
        "-functionattrs",
        "-globaldce",
        "-globalopt",
        "-gvn",
        "-indvars",
        "-inline",
        "-inline-cost",
        "-instcombine",
        "-ipsccp",
        "-jump-threading",
        "-lazy-value-info",
        "-lcssa",
        "-licm",
        "-loop-deletion",
        "-loop-idiom",
        "-loop-rotate",
        "-loop-simplify",
        "-loop-unroll",
        "-loop-unswitch",
        "-loops",
        "-lower-expect",
        "-memcpyopt",
        "-memdep",
        "-no-aa",
        "-notti",
        "-preverify",
        "-prune-eh",
        "-reassociate",
        "-scalar-evolution",
        "-sccp",
        "-simplify-libcalls",
        "-simplifycfg",
        "-sroa",
        "-strip-dead-prototypes",
        "-tailcallelim",
        "-targetlibinfo",
        "-tbaa",
        "-verify"
*/
	// ALL LLVM 3.3 COMPILER PASSES (OPT-3.3 --HELP)
	"-aa-eval",
	"-adce",
	"-alloca-hoisting",
	"-always-inline",
	"-argpromotion",
//	"-asan",			//  The AddressSanitizer run-time library should be linked to the final executable
//	"-asan-module",			
	"-basicaa",
	"-basiccg",
	"-bb-vectorize",
	"-block-freq",
	"-block-placement",
	"-bounds-checking",
	"-branch-prob",
	"-break-crit-edges",
	"-codegenprepare",
	"-constmerge",
	"-constprop",
	"-correlated-propagation",
	"-cost-model",
	"-count-aa",
	"-da",
//	"-datalayout",
	"-dce",
	"-deadargelim",
//	"-deadarghaX0r",
	"-debug-aa",
	"-die",
	"-domfrontier",
	"-domtree",
//	"-dot-callgraph",
//	"-dot-cfg",
//	"-dot-cfg-only",
//	"-dot-dom",
//	"-dot-dom-only",
//	"-dot-postdom",
//	"-dot-postdom-only",
//	"-dot-regions",
//	"-dot-regions-only",
	"-dse",
	"-early-cse",
	"-extract-blocks",
	"-functionattrs",
	"-generic-to-nvvm",			// Ate agora estoira sempre as sequencias mas quem sabe se pode ser util em algum caso
	"-globaldce",
	"-globalopt",
	"-globalsmodref-aa",
	"-gvn",
	"-indvars",
	"-inline",
	"-inline-cost",
//	"-insert-edge-profiling",
//	"-insert-gcov-profiling",
//	"-insert-optimal-edge-profiling",
//	"-insert-path-profiling",
	"-instcombine",
	"-instcount",
	"-instnamer",
	"-instsimplify",
	"-internalize",				// Ate agora estoira sempre as sequencias mas quem sabe se pode ser util em algum caso
	"-intervals",
	"-ipconstprop",
	"-ipsccp",
	"-iv-users",
	"-jump-threading",
	"-lazy-value-info",
	"-lcssa",
	"-libcall-aa",
	"-licm",
	"-lint",
	"-loop-deletion",
	"-loop-extract",
	"-loop-extract-single",
	"-loop-idiom",
	"-loop-instsimplify",
	"-loop-reduce",
	"-loop-rotate",
	"-loops",
	"-loop-simplify",
	"-loop-unroll",
	"-loop-unswitch",
	"-loop-vectorize",
	"-loweratomic",
	"-lower-expect",
	"-lowerinvoke",
	"-lowerswitch",
	"-mem2reg",
	"-memcpyopt",
	"-memdep",
	"-mergefunc",
	"-mergereturn",
	"-metarenamer",				// Ate agora estoira sempre as sequencias mas quem sabe se pode ser util em algum caso
	"-module-debuginfo",
//	"-msan",
	"-no-aa",
	"-no-path-profile",
	"-no-profile",
	"-notti",
	"-nvvm-reflect",
	"-objc-arc",
	"-objc-arc-aa",
	"-objc-arc-apelim",
	"-objc-arc-contract",
	"-objc-arc-expand",
	"-partial-inliner",
//	"-path-profile-loader",
//	"-path-profile-verifier",
	"-postdomtree",
	"-preverify",
//	"-print-alias-sets",
//	"-print-bb",
//	"-print-callgraph",
//	"-print-callgraph-sccs",
//	"-print-cfg-sccs",
//	"-print-dom-info",
//	"-print-externalfnconstants",
//	"-print-function",
//	"-print-memdeps",
//	"-print-module",
//	"-print-used-types",
	"-profile-estimator",
//	"-profile-loader",
//	"-profile-metadata-loader",
	"-profile-verifier",
	"-prune-eh",
	"-reassociate",
	"-reg2mem",
	"-regions",
	"-scalar-evolution",
	"-scalarrepl",
	"-scalarrepl-ssa",
	"-sccp",
	"-scev-aa",
	"-simplifycfg",
	"-simplify-libcalls",
	"-sink",
	"-slp-vectorizer",
	"-sroa",
	"-strip",
	"-strip-dead-debug-info",
	"-strip-dead-prototypes",
	"-strip-debug-declare",
	"-strip-nondebug",
	"-tailcallelim",
	"-targetlibinfo",
	"-tbaa",
//	"-tsan",
	"-verify",
//	"-view-callgraph",
//	"-view-cfg",
//	"-view-cfg-only",
//	"-view-dom",
//	"-view-dom-only",
//	"-view-postdom",
//	"-view-postdom-only",
//	"-view-regions",
//	"-view-regions-only"
	];

	sequences = [

	// SEQUENCES FOUND FOR 10000 ITERATIONS OF SIMULATED ANNEALING FOR ADRIANO'S KERNELS
	["-loop-rotate", "-sroa", "-jump-threading"],
	["-loop-rotate", "-sroa", "-jump-threading", "-instcombine"],
	["-loop-rotate", "-sroa", "-gvn", "-reassociate", "-instcombine"],
	["-gvn", "-instcombine", "-early-cse", "-simplifycfg", "-indvars", "-sroa"],
	["-loop-rotate", "-gvn", "-sroa"],
	["-licm", "-instcombine", "-gvn", "-instcombine", "-sroa", "-indvars", "-basicaa", "-reassociate"],
	["-instcombine", "-loop-rotate", "-sroa", "-gvn", "-inline"],
	["-sroa", "-early-cse"],
	["-jump-threading", "-inline", "-loop-rotate", "-licm", "-dse", "-basicaa"],
	["-reassociate", "-reassociate", "-instcombine", "-gvn", "-sroa"],
	["-inline", "-instcombine", "-basicaa", "-loop-rotate", "-functionattrs", "-licm"]

	// SEQUENCES FOUND FOR 10000 ITERATIONS OF SIMULATED ANNEALING FOR THE TEXAS INSTRUMENTS KERNELS
	/*
	   ["-licm", "-loop-rotate", "-sroa", "-instcombine", "-basicaa"],
	   ["-instcombine", "-jump-threading", "-loop-rotate", "-basicaa", "-gvn", "-instcombine"],
	   ["-loop-rotate", "-licm", "-dse", "-gvn", "-inline", "-ipsccp", "-dse", "-indvars", "-basicaa"],
	   ["-sroa", "-loop-rotate"],
	   ["-sroa", "-loop-rotate"],
	   ["-jump-threading", "-instcombine", "-sroa", "-simplifycfg", "-loop-rotate"],
	   ["-sroa", "-inline", "-indvars", "-instcombine", "-loop-deletion"],
	   ["-loop-rotate", "-basicaa", "-gvn", "-reassociate", "-sroa"],
	   ["-loop-rotate", "-early-cse", "-reassociate", "-prune-eh", "-licm", "-loop-unswitch", "-basicaa", "-early-cse", "-dse"],
	   ["-loop-rotate", "-reassociate", "-sroa", "-licm"],
	   ["-gvn", "-inline", "-globalopt", "-licm", "-loop-rotate", "-sroa", "-basicaa"],
	   ["-inline", "-deadargelim", "-sroa", "-early-cse", "-loop-rotate", "-simplifycfg", "-indvars", "-adce"],
	   ["-basicaa", "-gvn", "-instcombine", "-simplifycfg", "-inline", "-indvars", "-loop-deletion"],
	   ["-loop-rotate", "-sroa", "-gvn", "-loop-unroll", "-simplifycfg", "-reassociate"],
	   ["-sroa", "-early-cse"],
	   ["-loop-rotate", "-gvn"],
	   ["-loop-rotate", "-instcombine", "-basicaa", "-inline", "-licm"],
	   ["-inline", "-loop-rotate", "-licm", "-basicaa", "-early-cse"],
	   ["-sroa", "-reassociate", "-loop-rotate"],
	   ["-instcombine", "-gvn", "-inline", "-indvars", "-loop-rotate", "-loop-idiom", "-licm", "-sroa", "-loop-deletion", "-basicaa"],
	   ["-gvn", "-inline", "-loop-rotate", "-indvars", "-licm", "-instcombine", "-loop-unroll", "-loop-idiom", "-loop-deletion", "-basicaa"],
	   ["-loop-rotate", "-licm", "-early-cse", "-functionattrs", "-memdep", "-dse", "-basicaa", "-gvn"],
	   ["-licm", "-dse", "-basicaa"],
	   ["-sroa", "-reassociate", "-licm", "-loop-rotate", "-reassociate", "-early-cse", "-jump-threading", "-gvn", "-simplifycfg"],
	   ["-loop-rotate", "-basicaa", "-licm", "-reassociate", "-reassociate", "-instcombine", "-sroa", "-jump-threading", "-instcombine", "-gvn", "-simplifycfg"],
	   ["-loop-rotate", "-basicaa", "-globalopt", "-gvn", "-instcombine", "-licm"],
	   ["-sroa", "-licm", "-indvars", "-inline", "-loop-rotate", "-gvn", "-basicaa", "-inline", "-loop-unroll"],
	   ["-sroa", "-licm"],
	   ["-sroa"],
	   ["-loop-rotate", "-sroa"],
	   ["-sroa"],
	   ["-instcombine", "-early-cse", "-loop-rotate", "-gvn", "-gvn", "-instcombine", "-basicaa", "-gvn", "-loop-rotate", "-loop-unswitch"],
	   ["-loop-rotate", "-reassociate", "-basicaa", "-licm", "-sroa", "-early-cse"],
	   ["-loop-rotate", "-sroa", "-inline", "-deadargelim", "-indvars", "-licm", "-loop-unroll"],
	   ["-gvn", "-reassociate", "-basicaa", "-reassociate", "-licm", "-reassociate", "-instcombine", "-simplifycfg"],
	   ["-sroa", "-jump-threading", "-loop-rotate", "-gvn", "-loop-unroll", "-indvars", "-jump-threading", "-gvn"],
	   ["-sroa", "-inline", "-loop-rotate", "-simplifycfg", "-strip-dead-prototypes", "-loop-unroll"],
	   ["-jump-threading", "-sroa", "-loop-rotate", "-instcombine"],
	   ["-sroa", "-loop-rotate"],
	   ["-licm", "-loop-rotate", "-sroa", "-basicaa"]
	 */

	];

	end
