#!/bin/bash

#      Ricardo Nobre                                   #
#      Departamento de Engenharia Informática          #
#      FEUP, Porto, Portugal                           # 
#      ricardo.nobre@fe.up.pt                          #

function help {
    #echo "Illegal number or type of parameters"
    echo "OVERVIEW: larad 1.00 of 1 May 2016, by Ricardo Nobre <ricardo.nobre@fe.up.pt>."
    echo "ADAPTED: larad 2.00 of 1 May 2017, by Henrique Lima <henriquebrmg@gmail.com>."
    
    echo ""
    echo "USAGE: larad [options] <file>"
    #        echo "  Default action is to perform 10000 iterations of simulated annealing considering compiler sequences with up to 32 LLVM optimizations."
    echo ""
    echo -e "OPTIONS:"
    echo -e "  -compiler\t\t\t- Compiler (default: llvm371)"
    echo -e "    =llvm371\t\t\t-   LLVM 3.7.1 (Clang frontend + LLVM optimizer + LLVM compiler)"
    echo -e "    =llvm330\t\t\t-   LLVM 3.3.0 (Clang frontend + LLVM optimizer + LLVM compiler)"
    echo -e "    =reflectc\t\t\t-   REFLECTC (The CoSy-based FP7 REFLECT Project compiler)"
    echo -e "  -target\t\t\t- Target for exploration (default: host)"
    echo -e "    =host (L)\t\t\t-   Host CPU"
    echo -e "    =leon3 (L)\t\t\t-   LEON3 (simulated using TSIM2)"
    echo -e "    =microblaze (L,R)\t\t-   MicroBlaze 5-stage (simulated using ACE MB simulator)"
    echo -e "    =microblaze-small (L,R)\t-   MicroBlaze 3-stage (simulated using ACE MB simulator)"
    echo -e "  -algo\t\t\t\t- DSE algorithm to use (default: random)"
    echo -e "    =random\t\t\t-   Random sampling"
    echo -e "    =sa\t\t\t\t-   Simulated annealing (alpha, t_min and t_max automatically tuned to source aplication)"
    echo -e "    =hc\t\t\t\t-   Hill climber"
    echo -e "    =ins\t\t\t-   Insert approach"
    echo -e "    =ga\t\t\t\t-   Genetic Algorithm"
    echo -e "    =list\t\t\t-   Test list of known good sequences"
    echo -e "  -selection \t\t\t- Selection Type in GA (default: tour)"
    echo -e "    =tour\t\t\t-   Tournment (tour of 3)"
    echo -e "    =roulette\t\t\t-   Roulette"
    echo -e "  -maxGen\t\t\t- Number of generations (default: 100)"
    echo -e "  -popSize\t\t\t- Population Size (default:60)"
    echo -e "  -crossRate\t\t\t- Crossover operator rate (default:60)"
    echo -e "  -mutRate\t\t\t- Mutation operator rate (default:40)"
    echo -e "  -initChrom\t\t\t- Mutation operator rate (default:40)"
    echo -e "  -stopByFit\t\t\t- Number of generates that the best individual is the same  (default:15)"
    echo -e "  -nsteps\t\t\t- Number of compile/test iterations (default: 1000)"
    echo -e "  -seqlen\t\t\t- Maximum number of compiler passes per sequence (default: 32)"
    echo -e "  -nexec\t\t\t- Number of times each compiled program is tested per iteration (default: 1)"



#        echo -e "    =ga\t\t\t-   Genetic algorithms approach"
#        echo -e "    =fast\t\t-   Iterates a number of precomputed sequences"
#        echo -e "  -nsteps=<number>\t- Number of iterations of the chosen algorithm (default: 10000)"
#        echo -e "  -seqlen=<number>\t- Maxium number of optimizations of the compiler sequence (default: 32)"
#        echo -e "  -func=<f1,...,fN>\t- Tune compiler sequence(s) to specific function(s) (default: main)"
}


nsteps="1000"
target=""
algo="sa"
selection="tour"
maxGen="50"
popSize="60"
crossRate="60"
mutRate="40"
stopByFit="15"
initChrom="16"
seqlen="128"
nexec="1"
compiler="llvm371"
nr="-1"
cfile=${BASH_ARGV[0]}

if [[ ! "$cfile" == *.c ]]; then
    help
    exit 1
fi


# TODO: colocar esta verificação a funcionar
#if [[ "$target" -ne "llvm" ]] && [[ "$target" -ne "reflectc" ]]; then
#    help
#    exit 1
#fi

for var in "$@"
do
    #echo "$var"
    if [[ $var == -target=* ]]; then
        target=${var:8:100}
    fi
	if [[ $var == -algo=* ]]; then
		algo=${var:6:100}
	fi
    if [[ $var == -selection=* ]]; then
        selection=${var:11:100}
    fi
    if [[ $var == -maxGen=* ]]; then
        maxGen=${var:8:100}
    fi
    if [[ $var == -popSize=* ]]; then
        popSize=${var:9:100}
    fi
    if [[ $var == -crossRate=* ]]; then
        crossRate=${var:11:100}
    fi
    if [[ $var == -mutRate=* ]]; then
        mutRate=${var:9:100}
    fi
    if [[ $var == -stopByFit=* ]]; then
        stopByFit=${var:11:100}
    fi
    if [[ $var == -initChrom=* ]]; then
        initChrom=${var:11:100}
    fi
    if [[ $var == -nsteps=* ]]; then
            nsteps=${var:8:100}
    fi
    if [[ $var == -seqlen=* ]]; then
            seqlen=${var:8:100}
    fi
    if [[ $var == -nexec=* ]]; then
            nexec=${var:7:100}
    fi
    if [[ $var == -compiler=* ]]; then
            compiler=${var:10:100}
    fi
    if [[ $var == -nr=* ]]; then
            nr=${var:4:100}
    fi


#echo $var

done

if [[ "$target" == "" ]]; then
        help
        exit 1
fi

compiler2=$compiler
if [[ "$compiler" == "llvmfunc" ]]; then
	compiler="llvm"
	compiler2="llvmfunc"
fi

#if [[ "$algo" == "sa" ]]; then
cp /opt/lara-tools/larad/cleanseq.lara .
cp /opt/lara-tools/larad/compilers/"$compiler"/compiler_optimlevels.lara .
cp /opt/lara-tools/larad/compilers/compiler_setup.lara .

compiler=$compiler2
cp /opt/lara-tools/larad/targets/"$target"/"$compiler"/target_config.lara .
cp /opt/lara-tools/larad/algorithms/"$algo"/dse_algo.lara .
cp /opt/lara-tools/larad/reflectc_runoptims.xml .
cp /opt/lara-tools/larad/dse.lara .

larai dse.lara "--argv ('$cfile', $seqlen, $nexec, $nsteps, '$compiler', '$nr', '$selection', '$maxGen', '$popSize', '$crossRate', '$mutRate', '$stopByFit', '$initChrom')" 2>&1 | tee "$cfile"_"$seqlen"_"$nexec"_"$nsteps"_"$algo"_"$target"_"$compiler"_"$nr"_"$selection"_"$maxGen"_"$popSize"_"$crossRate"_"$mutRate"_"$stopByFit"_"initChrom".txt

rm cleanseq.lara compiler_optimlevels.lara compiler_setup.lara target_config.lara dse_algo.lara reflectc_runoptims.xml dse.lara dse.xml 
exit 1
#fi

